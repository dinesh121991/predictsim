
***** Pyss
the Python Scheduler Simulator




*** Run exemples:


** normal run:
./run_simulator.py 5K_sample sample_config.py res.swf 

** profiling/optimizing:
(after a "make" in ../../../experiments/data/CEA-curie_sample/ )
time pypy -OO -m cProfile -o simul.cprof ./run_simulator.py '../../../experiments/data/CEA-curie_sample/swf_unfiltered/log.swf' sample_config_profiling.py res.swf 

runsnake simul.cprof

time: measure running time
pypy: ~6 time faster than python2 on my computer
-OO: python in optimized mode
-m cProfile -o simul.cprof: generate a profile, very useful.
... : the python scripts with args.


** Batch mode
run_valexpe_client.py and run_valexpe_server.py can run batchs of simulations distributed among several computers.
A SSH passwordless connection from the clients to the server should be available.
Configure the directory in run_valexpe_client.py.
The set-up the run_valexpe_server.py
Set your expe_name, num_processors and dict_path.
Then ./run_valexpe_server.py init_db .
You are ready to launch your clients: pypy -OO run_valexpe_client.py serverhost num_thread
Copy finished experiments with ./run_valexpe_server.py copy (on clients)

run_valexpe_server.py stats gives stats based on the swf files.
run_valexpe_server.py stats_db gives stats based on the database.


*** Notes on schedulers:
** alpha_easy_scheduler
Useless scheduler.

** common_dist_easy_plus_plus_scheduler
It's easy_plus_plus_scheduler with a dirty patch were all users are the same.

** conservative_scheduler
Pure conservative scheduler.

** double_conservative_scheduler
this scheduler only doubles the user estimation and then apply the regular Conservative Scheduler
TODO: add a test that compare this to conservative_prediction_scheduler (predictor = double_reqtime)

** double_easy_backfill_scheduler
this scheduler only doubles the user estimation and then apply the regular Easy Backfill Scheduler
TODO: add a test that compare this to easy_prediction_scheduler (predictor = double_reqtime)

** double_perfect_easy_backfill_scheduler
this scheduler only doubles the REAL runtime and then apply the regular Easy Backfill Scheduler
TODO: add a test that compare this to easy_prediction_scheduler (predictor = double_runtime)

** easy_backfill_scheduler
Pure easy backfill scheduler

** easy_plus_plus_scheduler
This algorithm implements the algorithm in the paper of Tsafrir, Etzion, Feitelson, june 2007?
This algo need predictor/corrector.
TODO: verify the algo

** easy_sjbf_scheduler
Pure SJBF (shortest job backfilled first) scheduler

** fcfs_scheduler
Pure FCFS

** greedy_easy_backfill_scheduler
EasyBackfillScheduler where jobs can be sorted in different orders.
TODO: scheduler parameters should be taken from "options" (ie. the config file) not from python parameters.
TODO: with the good parameters it should be the same as easy_sjbf_scheduler

** head_double_easy_scheduler
EasyBackfillScheduler where only the non-backfilled job have their predicted runtime = 2*reqtime
I don't see the purpose of this scheduler.

** lookahead_easy_backfill_scheduler
This scheduler implements the LOS Scheduling Algorithm

** maui_scheduler
The maui scheduler, easy backfilling with jobs sorted by a combinaison of factors.

** orig_common_dist_probabilistic_easy_scheduler
orig_probabilistic_easy_scheduler with only one user (all users are overridden as one unique suer (yes it's a dirty hack))

** orig_probabilistic_easy_scheduler
This algorithm implements a version of Feitelson and Nissimov, June 2007.

** perfect_easy_backfill_scheduler
EasyBackfillScheduler whith prediction=runtime
TODO: make a test to compare results

** reverse_easy_scheduler
EasyBackfillScheduler where lasts jobs are backfilled first

** shrinking_easy_scheduler
EasyBackfillScheduler(predictor=reqtime/2, corrector=reqtime)
TODO: make a test to compare both version

** tail_double_easy_scheduler
EasyBackfillScheduler where predicted_runtime is doubled when backfilling is done






*** Other notes:

** To remove asserts:
for i in schedulers/*.py ; do  sed -i 's/assert /pass #assert /g' $i ; done
for i in base/*.py ; do  sed -i 's/assert /pass #assert /g' $i ; done
** To re-add asserts:
for i in schedulers/*.py ; do  sed -i 's/pass #assert /assert /g' $i ; done
for i in base/*.py ; do  sed -i 's/pass #assert /assert /g' $i ; done


